name: Dev Push Ci/CD

#dev 브랜치에 Push 시 ci/cd 수행

on:
  push:
    branches: [ "dev" ]

jobs:
  build:
    name: 빌드 및 도커 파일 생성
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4
      - name: Java v17 다운로드
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: application.yml 파일 생성
        run: |
          mkdir -p ./src/main/resources
          cd ./src/main/resources   
          echo "${{ secrets.APPLICATION }}" > ./application.yml

      - name: gradlew 권한 부여
        run: chmod +x ./gradlew

      - name: 빌드
        run: ./gradlew build


#      도커 허브 아이디가 정해지지 않아 주석 처리
#      ToDo: 개발 계정이 정해지면 주석 해제

#      - name: Docker 로그인
#        uses: docker/login-action@v3
#        with:
#          username: ${{ secrets.DOCKERHUB_ID }}
#          password: ${{ secrets.DOCKERHUB_PASSWORD }}
#
#
#      - name: Docker 이미지 생성
#        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/dev-server .
#
#      - name: Docker 이미지 Push
#        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/dev-server



#  개발 서버가 아직 만들어 지지 않아 주석 처리
#  ToDo: 개발 서버가 만들어 지는 대로 Deploy 수정

#  deploy:
#    name: 배포
#    runs-on: ubuntu-latest
#    permissions: write-all
#    needs: build
#
#    steps:
#      - uses: actions/checkout@v3
#
#      - name: 배포
#        uses: appleboy/ssh-action@v1.0.0
#        with:
#          host: ${{secrets.HOST}}
#          username: ${{secrets.GCP_USERNAME}}
#          key: ${{secrets.GCP_PRIVATEKEY}}
#          script: |
#            sudo docker login -u ${{ secrets.DOCKERHUB_ID }} -p ${{ secrets.DOCKERHUB_PASSWORD }}
#            sudo docker pull ${{secrets.DOCKERHUB_USERNAME}}/dev-server
#            sudo docker stop server
#            sudo docker container rm server
#            sudo docker run -dit -p 8080:8080 --name server ${{secrets.DOCKERHUB_USERNAME}}/dev-server
#            sudo docker image prune -f